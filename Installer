#!/usr/bin/env bash
#  ██╗███╗   ██╗███████╗████████╗ █████╗ ██╗     ██╗     ███████╗██████╗
#  ██║████╗  ██║██╔════╝╚══██╔══╝██╔══██╗██║     ██║     ██╔════╝██╔══██╗
#  ██║██╔██╗ ██║███████╗   ██║   ███████║██║     ██║     █████╗  ██████╔╝
#  ██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║     ██║     ██╔══╝  ██╔══██╗
#  ██║██║ ╚████║███████║   ██║   ██║  ██║███████╗███████╗███████╗██║  ██║
#  ╚═╝╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝╚═╝  ╚═╝

CRE=$(tput setaf 1)
CYE=$(tput setaf 3)
CGR=$(tput setaf 2)
CBL=$(tput setaf 4)
BLD=$(tput bold)
CNC=$(tput sgr0)

date=$(date +%Y%m%d-%H%M%S)
ERROR_LOG="$HOME/InstallerError.log"

########## ---------- You must not run this as root ---------- ##########

if [ "$(id -u)" = 0 ]; then
    echo "This script MUST NOT be run as root user."
    exit 1
fi

home_dir=$HOME
current_dir=$(pwd)

if [ "$current_dir" != "$home_dir" ]; then
    printf "%s%sThe script must be executed from the HOME directory.%s\n" "${BLD}" "${CYE}" "${CNC}"
    exit 1
fi

log_error() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$ERROR_LOG"
}

is_installed() {
    pacman -Qq "$1" &> /dev/null
}

########## ---------- Welcome ---------- ##########

printf '%s%sThis script will check if you have the necessary dependencies, and if not, it will install them. Then, it will clone my repository in your HOME directory.\nAfter that, it will create a backup of your files, and then copy the new files to your computer.\n\nMy bspwm_theme DO NOT modify any of your system configurations.\nYou will be prompted for your root password to install missing dependencies and/or to switch to zsh shell if its not your default.\n\nThis script doesnt have the potential power to break your system, it only copies files from my repository to your HOME directory.%s\n\n' "${BLD}" "${CRE}" "${CNC}"

while true; do
    read -rp " Do you wish to continue? [y/N]: " yn
    case $yn in
        [Yy]* ) break ;;
        [Nn]* ) exit ;;
        * ) printf " Error: just write 'y' or 'n'\n\n" ;;
    esac
done
clear

########## ---------- Install packages ---------- ##########

printf "Installing needed packages..\n"

dependencias=(alacritty arj base-devel bat brightnessctl bspwm bzip2 cargo cpio dunst eza feh firefox gedit gvfs-mtp git imagemagick jdk-openjdk \
                jq lbzip2 libwebp libxcb libx11 lrzip lxappearance lzop maim npm p7zip pamixer pacman-contrib \
		papirus-icon-theme picom playerctl polybar polkit-gnome python-gobject \
                redshift rofi sxhkd ttf-inconsolata ttf-jetbrains-mono ttf-jetbrains-mono-nerd \
                ttf-joypixels ttf-terminus-nerd ttf-ubuntu-mono-nerd ueberzug unrar webp-pixbuf-loader xcb-util xclip xdg-user-dirs \
                xdo xdotool xsettingsd xorg-xdpyinfo xorg-xkill xorg-xprop xorg-xrandr xorg-xsetroot xorg-xwininfo xz yazi)

printf "%s%sChecking for required packages...%s\n\n" "${BLD}" "${CBL}" "${CNC}"

for paquete in "${dependencias[@]}"; do
    if ! is_installed "$paquete"; then
        if sudo pacman -S "$paquete" --noconfirm >/dev/null 2> >(tee -a "$ERROR_LOG"); then
            printf "%s%s%s %shas been installed successfully.%s\n" "${BLD}" "${CYE}" "$paquete" "${CBL}" "${CNC}"
        else
            printf "%s%s%s %shas not been installed correctly. See %sInstallerError.log %sfor more details.%s\n" \
                   "${BLD}" "${CYE}" "$paquete" "${CRE}" "${CBL}" "${CRE}" "${CNC}"
            log_error "Failed to install package: $paquete"
        fi
        sleep 1
    else
        printf '%s%s%s %sis already installed on your system!%s\n' "${BLD}" "${CYE}" "$paquete" "${CGR}" "${CNC}"
        sleep 1
    fi
done
sleep 5
clear

########## ---------- Installing Rust ---------- ##########

printf "Install Rust\n"

curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

printf "%s%sRust has been installed successfully!%s\n" "${BLD}" "${CGR}" "${CNC}"

sleep 3
clear

########## ---------- Installing Yay ---------- ##########

printf "Install Yay\n"

if command -v yay >/dev/null 2>&1; then
    printf "%s%sYay is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
else
    printf "%s%sInstalling yay%s\n" "${BLD}" "${CBL}" "${CNC}"
    {
        cd "$HOME" || exit
        git clone https://aur.archlinux.org/yay.git
        cd yay || exit 1
        makepkg -si --noconfirm
	cd ..
	rm -rf yay
	printf "%s%sYay has been installed successfully!%s\n" "${BLD}" "${CGR}" "${CNC}"
    } || {
        printf "\n%s%sFailed to install Yay. You may need to install it manually%s\n" "${BLD}" "${CRE}" "${CNC}"
    }
fi
sleep 3
clear

########## ----------Insalling fonts ---------- ##########

fonts=("nerd-fonts-complete" "ttf-font-awesome" "material-design-icons-desktop")

# Instalar fuentes con yay
for font in "${fonts[@]}"; do
    if ! pacman -Qi "$font" &>/dev/null; then
        printf "%s%sInstalling %s...%s\n" "${BLD}" "${CYE}" "$font" "${CNC}"
        if yay -S --noconfirm "$font" >/dev/null 2> >(tee -a "$ERROR_LOG"); then
            printf "%s%s%s has been installed successfully.%s\n" "${BLD}" "${CYE}" "$font" "${CNC}"
        else
            printf "%s%sError: %s could not be installed. Check %s%s%s for details.%s\n" \
                   "${BLD}" "${CRE}" "$font" "${CYE}" "$ERROR_LOG" "${CRE}" "${CNC}"
        fi
    else
        printf "%s%s%s is already installed on your system!%s\n" "${BLD}" "${CGR}" "$font" "${CNC}"
    fi
done

sleep 3
clear

########## ---------- Installing Eww ---------- ##########

printf "Installing Eww...\n"

# Clonar el repositorio de Eww y compilarlo desde el código fuente
if [ ! -d "$HOME/eww" ]; then
    git clone https://github.com/elkowar/eww "$HOME/eww" || {
        printf "%s%sError: Failed to clone Eww repository!%s\n" "${BLD}" "${CRE}" "${CNC}"
        exit 1
    }
else
    printf "%s%sEww repository already cloned, updating...%s\n" "${BLD}" "${CGR}" "${CNC}"
    cd "$HOME/eww" && git pull
fi

# Cambiar al directorio del repositorio y construir el proyecto
cd "$HOME/eww" || exit 1
if ! cargo build --release --no-default-features --features x11; then
    printf "%s%sError: Failed to build Eww! Please check the log.%s\n" "${BLD}" "${CRE}" "${CNC}"
    exit 1
fi

# Hacer que el binario sea ejecutable
chmod +x "$HOME/eww/target/release/eww"
sudo cp $HOME/eww/target/release/eww /usr/local/bin/

########## ---------- Preparing Folders ---------- ##########

if [ ! -e "$HOME/.config/user-dirs.dirs" ]; then
    xdg-user-dirs-update
fi

########## ---------- Cloning the Rice! ---------- ##########

printf "Downloading bspwm_theme\n"

repo_url="https://github.com/YakitoSX/bspwm_theme"
repo_dir="$HOME/bspwm_theme"

if [ -d "$repo_dir" ]; then
    printf "Removing existing bspwm_theme repository\n"
    rm -rf "$repo_dir"
fi

printf "Cloning bspwm_theme from %s\n" "$repo_url"
git clone --depth=1 "$repo_url" "$repo_dir"

sleep 3
clear

########## ---------- Moving Themes ---------- ##########

# La carpeta 'themes' ya se descargó, vamos a mover los temas

printf "Moving themes\n"
themes_dir="$repo_dir/themes"
if [ -d "$themes_dir" ]; then
    echo "Found 'themes' directory, moving themes to appropriate locations..."
    
    # Crear las carpetas de destino si no existen
    [ ! -d "$HOME/.themes" ] && mkdir -p "$HOME/.themes"
    [ ! -d "$HOME/.icons" ] && mkdir -p "$HOME/.icons"
    
    # Mover los temas GTK que están dentro de 'GTK_THEME'
    if [ -d "$themes_dir/GTK_THEME" ]; then
        echo "Moving GTK themes..."
        mv "$themes_dir/GTK_THEME"/* "$HOME/.themes/"
        echo "Moved GTK themes to $HOME/.themes/"
    else
        echo "No GTK themes found in the 'GTK_THEME' directory."
    fi
    
    # Mover los temas de cursor que están dentro de 'CURSOR_THEME'
    if [ -d "$themes_dir/CURSOR_THEME" ]; then
        echo "Moving Cursor themes..."
        mv "$themes_dir/CURSOR_THEME"/* "$HOME/.icons/"
        echo "Moved Cursor themes to $HOME/.icons/"
    else
        echo "No Cursor themes found in the 'CURSOR_THEME' directory."
    fi
else
    echo "No 'themes' directory found in the repository."
fi

sleep 3
clear

########## ---------- Copy the Rice! ---------- ##########

printf "Installing bspwm_theme..\n"
printf "Copying files to respective directories..\n"

[ ! -d ~/.config ] && mkdir -p ~/.config
[ ! -d ~/.local/bin ] && mkdir -p ~/.local/bin
[ ! -d ~/.local/share ] && mkdir -p ~/.local/share

for dirs in ~/bspwm_theme/config/*; do
    dir_name=$(basename "$dirs")
    if cp -R "${dirs}" ~/.config/ 2>> InstallerError.log; then
        printf "%s%s%s %sconfiguration installed successfully%s\n" "${BLD}" "${CYE}" "$dir_name" "${CGR}" "${CNC}"
        
        # Asegurarse de que los scripts copiados tengan permisos de ejecución
        find ~/.config/"$dir_name" -type f \( -name "*.sh" -o -name "*.bash" -o -name "*.file" \) -exec chmod +x {} \;
        printf "Permissions set for scripts in: %s\n" "$dir_name"
        
        sleep 1
    else
        printf "%s%s%s %sconfiguration failed to be installed, see %sInstallerError.log %sfor more details.%s\n" "${BLD}" "${CYE}" "$dir_name" "${CRE}" "${CBL}" "${CRE}" "${CNC}"
        sleep 1
    fi
done

fc-cache -rv >/dev/null 2>&1

printf "\n\n%s%sFiles copied successfully!!%s\n" "${BLD}" "${CGR}" "${CNC}"

sleep 3
clear

########## ---------- Installing Paru ---------- ##########

if command -v paru >/dev/null 2>&1; then
    printf "%s%sParu is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
else
    printf "%s%sInstalling paru%s\n" "${BLD}" "${CBL}" "${CNC}"
    {
        cd "$HOME" || exit
        git clone https://aur.archlinux.org/paru-bin.git
        cd paru-bin || exit
        makepkg -si --noconfirm
    } || {
        printf "\n%s%sFailed to install Paru. You may need to install it manually%s\n" "${BLD}" "${CRE}" "${CNC}"
    }
fi

sleep 3
clear

printf "Installing AUR dependencies\n"

# Define an array of AUR dependencies
aur_dependencies=(tdrop-git xqp rofi-greenclip ttf-maple i3lock-color simple-mtpfs)

for aur_package in "${aur_dependencies[@]}"; do
    if ! paru -Qq "$aur_package" &>/dev/null; then
        printf "%s%sInstalling %s...%s\n" "${BLD}" "${CYE}" "$aur_package" "${CNC}"
        if paru -S "$aur_package" --noconfirm >/dev/null 2> >(tee -a "$ERROR_LOG"); then
            printf "%s%s%s %sinstalled successfully.%s\n" "${BLD}" "${CGR}" "$aur_package" "${CBL}" "${CNC}"
        else
            printf "%s%s%s %sinstallation failed. Check %sInstallerError.log %sfor details.%s\n" \
                   "${BLD}" "${CRE}" "$aur_package" "${CRE}" "${CBL}" "${CRE}" "${CNC}"
            log_error "Failed to install AUR package: $aur_package"
        fi
    else
        printf "%s%s%s %sis already installed.%s\n" "${BLD}" "${CGR}" "$aur_package" "${CBL}" "${CNC}"
    fi
    sleep 1
done

printf "\n%s%sAll AUR dependencies checked and processed.%s\n" "${BLD}" "${CGR}" "${CNC}"

sleep 3
clear

########## ---------- Setting up BSPWM and OpenApps ---------- ##########

printf "Setting up BSPWM configuration.\n"

# Permissions for bspwm
chmod +x ~/.config/bspwm/bspwmrc
chmod +x ~/.config/bspwm/src/OpenApps

sleep 3
clear

########## --------- Changing zsh and configure Alacritty as the default terminal ---------- ##########

# Configure Alacritty as the default terminal using update-alternatives
if command -v update-alternatives &>/dev/null; then
    echo "Setting Alacritty as the default terminal..."

    # Add Alacritty to the alternatives system if not already configured
    sudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator /usr/bin/alacritty 50

    # Select Alacritty as the default terminal
    sudo update-alternatives --config x-terminal-emulator
else
    echo "update-alternatives not found, unable to set Alacritty as the default terminal."
fi

# Create an alias for xdg-terminal (if it doesn't exist)
echo "Creating an alias for xdg-terminal..."

if [ ! -f /usr/local/bin/xdg-terminal ]; then
    sudo bash -c 'echo "#!/bin/bash\nalacritty -e \"\$@\"" > /usr/local/bin/xdg-terminal'
    sudo chmod +x /usr/local/bin/xdg-terminal
    echo "xdg-terminal alias created successfully."
else
    echo "xdg-terminal alias already exists."
fi

sleep 3

# Comprobar si zsh está instalado
if ! command -v zsh &>/dev/null; then
    printf "Installing zsh...\n"
    sudo pacman -S zsh --noconfirm || { printf "%s%sFailed to install zsh!%s\n" "${BLD}" "${CRE}" "${CNC}"; exit 1; }
    printf "%s%sZsh has been installed successfully!%s\n" "${BLD}" "${CGR}" "${CNC}"
else
    printf "%s%sZsh is already installed!%s\n" "${BLD}" "${CGR}" "${CNC}"
fi

# Instalar Oh My Zsh
if [ ! -d "$HOME/.oh-my-zsh" ]; then
    printf "Installing Oh My Zsh...\n"
    git clone https://github.com/ohmyzsh/ohmyzsh.git "$HOME/.oh-my-zsh" || { printf "%s%sFailed to clone Oh My Zsh repository!%s\n" "${BLD}" "${CRE}" "${CNC}"; exit 1; }
    cp "$HOME/.oh-my-zsh/templates/zshrc.zsh-template" "$HOME/.zshrc"
    cp "$HOME/.zshrc" "$HOME/.zshrc.orig"
    printf "%s%sOh My Zsh has been installed successfully!%s\n" "${BLD}" "${CGR}" "${CNC}"
else
    printf "%s%sOh My Zsh is already installed!%s\n" "${BLD}" "${CGR}" "${CNC}"
fi

sleep 3
clear

########## --------- Changing shell to zsh ---------- ##########

printf "Changing default shell to zsh\n"

	if [[ $SHELL != "/usr/bin/zsh" ]]; then
        printf "%s%sChanging your shell to zsh...%s\n\n" "${BLD}" "${CYE}" "${CNC}"

        if chsh -s /usr/bin/zsh 2> >(tee -a "$ERROR_LOG"); then
            printf "\n%s[%sOK%s%s] Shell changed to zsh successfully!%s\n\n" "${BLD}" "${CGR}" "${CNC}" "${BLD}" "${CNC}"
        else
            printf "%s%sError changing your shell to zsh. Please check %sInstallerError.log%s for details%s\n\n" \
                   "${BLD}" "${CRE}" "${CYE}" "${CRE}" "${CNC}"
            log_error "Failed to change shell to zsh"
        fi
    else
        printf "%s%sYour shell is already zsh%s\n\n" "${BLD}" "${CGR}" "${CNC}"
    fi

sleep 3
clear

########## --------- exit ---------- ##########

# Clean up: Remove the cloned repository and the installer script
echo "Cleaning up temporary files..."

# Remove bspwm_theme directory
rm -rf "$HOME/bspwm_theme"

echo "Cleanup completed!"

# Remove InstallerError.log
if [ ! -s $HOME/InstallerError.log ]; then
    rm -f $HOME/InstallerError.log
    printf "No errors found, InstallerError.log has been removed.\n"
else
    printf "Errors were logged in InstallerError.log. Please review them.\n"
fi

sleep 3
clear

printf "Installation is complete\n"

printf "%sThe installation is complete, you %sneed%s to restart your machine.%s\n\n" "${BLD}" "${CBL}" "${CNC}" "${CNC}"

	while true; do
		read -rp " Reboot now? [y/N]: " yn
		case $yn in
			[Yy]* )
				printf "\n%s%sRebooting now...%s\n" "${BLD}" "${CGR}" "${CNC}"
				# Remove installer file
				rm -f $HOME/Installer
				sleep 3
				reboot
				break
				;;
			[Nn]* )
				printf "\n%s%sOK, remember to restart later!%s\n\n" "${BLD}" "${CYE}" "${CNC}"
				break
				;;
			* )
				printf "\n%s%sPlease answer yes or no.%s\n\n" "${BLD}" "${CRE}" "${CNC}"
				;;
		esac
	done